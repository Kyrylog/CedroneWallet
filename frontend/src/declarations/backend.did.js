/* eslint-disable */

// @ts-nocheck

// This file was automatically generated by @dfinity/caffeine-bindgen@0.1.0-beta.7.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { IDL } from '@icp-sdk/core/candid';

export const http_header = IDL.Record({
  'value' : IDL.Text,
  'name' : IDL.Text,
});
export const http_request_result = IDL.Record({
  'status' : IDL.Nat,
  'body' : IDL.Vec(IDL.Nat8),
  'headers' : IDL.Vec(http_header),
});
export const TransformationInput = IDL.Record({
  'context' : IDL.Vec(IDL.Nat8),
  'response' : http_request_result,
});
export const TransformationOutput = IDL.Record({
  'status' : IDL.Nat,
  'body' : IDL.Vec(IDL.Nat8),
  'headers' : IDL.Vec(http_header),
});

export const idlService = IDL.Service({
  'fetchAptPrice' : IDL.Func([], [IDL.Text], []),
  'generateAndValidateMultiple' : IDL.Func([IDL.Nat], [], []),
  'generateMnemonic' : IDL.Func([], [IDL.Vec(IDL.Text)], []),
  'getAvailableWords' : IDL.Func([], [IDL.Vec(IDL.Text)], ['query']),
  'getBip39Words' : IDL.Func([], [IDL.Vec(IDL.Text)], ['query']),
  'getCachedPrice' : IDL.Func([], [IDL.Opt(IDL.Text)], []),
  'getDevnetExplorerUrl' : IDL.Func([IDL.Text], [IDL.Text], ['query']),
  'getNetworkPreference' : IDL.Func([IDL.Text], [IDL.Opt(IDL.Text)], []),
  'requestDevnetFaucet' : IDL.Func([IDL.Text], [IDL.Text], []),
  'requestTestnetFaucet' : IDL.Func([IDL.Text], [IDL.Text], []),
  'setBip39Words' : IDL.Func([IDL.Vec(IDL.Text)], [], []),
  'setNetworkPreference' : IDL.Func([IDL.Text, IDL.Text], [], []),
  'testGenerateMnemonic' : IDL.Func([], [], []),
  'transform' : IDL.Func(
      [TransformationInput],
      [TransformationOutput],
      ['query'],
    ),
  'validateMnemonic' : IDL.Func([IDL.Vec(IDL.Text)], [IDL.Bool], ['query']),
});

export const idlInitArgs = [];

export const idlFactory = ({ IDL }) => {
  const http_header = IDL.Record({ 'value' : IDL.Text, 'name' : IDL.Text });
  const http_request_result = IDL.Record({
    'status' : IDL.Nat,
    'body' : IDL.Vec(IDL.Nat8),
    'headers' : IDL.Vec(http_header),
  });
  const TransformationInput = IDL.Record({
    'context' : IDL.Vec(IDL.Nat8),
    'response' : http_request_result,
  });
  const TransformationOutput = IDL.Record({
    'status' : IDL.Nat,
    'body' : IDL.Vec(IDL.Nat8),
    'headers' : IDL.Vec(http_header),
  });
  
  return IDL.Service({
    'fetchAptPrice' : IDL.Func([], [IDL.Text], []),
    'generateAndValidateMultiple' : IDL.Func([IDL.Nat], [], []),
    'generateMnemonic' : IDL.Func([], [IDL.Vec(IDL.Text)], []),
    'getAvailableWords' : IDL.Func([], [IDL.Vec(IDL.Text)], ['query']),
    'getBip39Words' : IDL.Func([], [IDL.Vec(IDL.Text)], ['query']),
    'getCachedPrice' : IDL.Func([], [IDL.Opt(IDL.Text)], []),
    'getDevnetExplorerUrl' : IDL.Func([IDL.Text], [IDL.Text], ['query']),
    'getNetworkPreference' : IDL.Func([IDL.Text], [IDL.Opt(IDL.Text)], []),
    'requestDevnetFaucet' : IDL.Func([IDL.Text], [IDL.Text], []),
    'requestTestnetFaucet' : IDL.Func([IDL.Text], [IDL.Text], []),
    'setBip39Words' : IDL.Func([IDL.Vec(IDL.Text)], [], []),
    'setNetworkPreference' : IDL.Func([IDL.Text, IDL.Text], [], []),
    'testGenerateMnemonic' : IDL.Func([], [], []),
    'transform' : IDL.Func(
        [TransformationInput],
        [TransformationOutput],
        ['query'],
      ),
    'validateMnemonic' : IDL.Func([IDL.Vec(IDL.Text)], [IDL.Bool], ['query']),
  });
};

export const init = ({ IDL }) => { return []; };
